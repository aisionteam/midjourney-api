services:
  app:
    build: .
    command: npm start
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app-net

  web:
    build: .
    command: npm run startWeb
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - traefik-net
      - app-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}.rule=Host(`${PROJECT_NAME}.bot.inbeet.tech`)"
      - "traefik.http.routers.${PROJECT_NAME}.middlewares=https-redirect"
      - "traefik.http.routers.${PROJECT_NAME}-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}-secure.rule=Host(`${PROJECT_NAME}.bot.inbeet.tech`)"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.${PROJECT_NAME}-secure.service=${PROJECT_NAME}"
      - "traefik.http.services.${PROJECT_NAME}.loadbalancer.server.port=3000"
      - "traefik.docker.network=traefik-net"

  redis:
    image: redis:alpine
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - app-net

  mongodb:
    image: mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test --quiet
      # test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./db.data:/data/db
    networks:
      - app-net
  # mongo-express:
  #   image: mongo-express
  #   restart: unless-stopped
  #   environment:
  #     ME_CONFIG_MONGODB_SERVER: mongodb
  #     ME_CONFIG_MONGODB_PORT: "27017"
  #     # ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  #     # ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  #     # ports:
  #     #   - "8081:8081"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.${PROJECT_DB}.entrypoints=web"
  #     - "traefik.http.routers.${PROJECT_DB}.rule=Host(`${PROJECT_DB}.bot.inbeet.tech`)"
  #     - "traefik.http.routers.${PROJECT_DB}.middlewares=https-redirect"
  #     - "traefik.http.routers.${PROJECT_DB}-secure.entrypoints=websecure"
  #     - "traefik.http.routers.${PROJECT_DB}-secure.rule=Host(`${PROJECT_DB}.bot.inbeet.tech`)"
  #     - "traefik.http.routers.${PROJECT_DB}-secure.tls=true"
  #     - "traefik.http.routers.${PROJECT_DB}-secure.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.${PROJECT_DB}-secure.service=${PROJECT_DB}"
  #     - "traefik.http.routers.${PROJECT_DB}-secure.middlewares=${PROJECT_DB}-auth"
  #     - "traefik.http.middlewares.${PROJECT_DB}-auth.basicauth.users=mjs:$$2y$$05$$MIvU1G1bSBgQUrWBugCLVOQUxMGJxmq4pGX/6I54P2QN1iyQaIJsK"
  #     - "traefik.http.services.${PROJECT_DB}.loadbalancer.server.port=8081"
  #     - "traefik.docker.network=traefik-net"
  #   networks:
  #     - traefik-net
  #     - app-net
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy

networks:
  app-net:
  traefik-net:
    external: true
