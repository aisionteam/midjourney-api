services:
  app:
    build: .
    command: npm start
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app-net

  web:
    build: .
    command: npm run startWeb
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app-net

  redis:
    image: redis:alpine
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - app-net

  mongodb:
    image: mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/test --quiet
      # test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./db.data:/data/db
    networks:
      - app-net

networks:
  app-net:
